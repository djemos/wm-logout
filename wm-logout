#!/usr/bin/env python3

'''
    wm-logout - present a dialog to perform power management actions or
    logout from a window manager
    
    it requires: elogind
'''
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import os

class WMLogout(Gtk.Window):

    def __init__(self):

        # Set up GTK window
        Gtk.Window.__init__(self, title="Exit")
        
        icon_size = 3 
        btn_border_size = 6
        self.set_deletable(False)
        self.set_resizable(False)
        self.set_position(1)
        self.connect("delete_event", self.cancel)
        self.set_border_width(int(1.5*btn_border_size))
        self.connect("destroy", Gtk.main_quit)
    
        # Create a box to pack other widgets into
        self.box_vert = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=2)
        self.add(self.box_vert)

        # Create label
        self.lbl_message = Gtk.Label('Please select an action:')
        self.box_vert.pack_start(self.lbl_message, True, True, 0)
        self.lbl_message.show()

        # Create a box for the top row of buttons
        self.box_top = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.box_vert.pack_start(self.box_top, True, True, 0)

        # Create a box for the middle row of buttons
        self.box_middle = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.box_vert.pack_start(self.box_middle, True, True, 0)
        
        # Create a box for the bottom row of buttons
        self.box_bottom = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.box_vert.pack_start(self.box_bottom, True, True, 0)
        
        # Create shutdown button
        self.btn_shutdown = Gtk.Button('_Shutdown', None, True)         # Instantiate button
        self.btn_shutdown.set_border_width(btn_border_size)             # Set border width to sane amount        
        self.image=Gtk.Image();
        self.image.set_from_icon_name("gnome-shutdown", icon_size)
        self.btn_shutdown.set_property('image', self.image)
        self.btn_shutdown.connect("clicked", self.shutdown)             # Connect event handler
        self.box_top.pack_start(self.btn_shutdown, True, True, 0)       # Insert into the correct layout box
        self.btn_shutdown.show()                                        # Show button
        
        
        # Now repeat for remaining buttons
        
        # Create logout button
        self.btn_logout = Gtk.Button('_Log out', None, True)
        self.btn_logout.set_border_width(btn_border_size)        
        self.image = Gtk.Image()
        self.image.set_from_icon_name("gnome-logout", icon_size)
        self.btn_logout.set_property('image', self.image)
        self.btn_logout.connect("clicked", self.logout)
        self.box_middle.pack_start(self.btn_logout, True, True, 0)
        self.btn_logout.show()
        
        # Create reboot button
        self.btn_reboot = Gtk.Button('_Reboot', None, True)
        self.btn_reboot.set_border_width(btn_border_size)
        self.image = Gtk.Image()
        self.image.set_from_icon_name("reload", icon_size)
        self.btn_reboot.set_property('image', self.image)
        self.btn_reboot.connect("clicked", self.reboot)
        self.box_middle.pack_start(self.btn_reboot, True, True, 0)
        self.btn_reboot.show()

        # Create suspend button
        self.btn_suspend = Gtk.Button('S_uspend', None, True)
        self.btn_suspend.set_border_width(btn_border_size)
        self.image = Gtk.Image()
        self.image.set_from_icon_name("gnome-session-suspend", icon_size)
        self.btn_suspend.set_property('image', self.image)
        self.btn_suspend.connect("clicked", self.suspend)
        self.box_middle.pack_start(self.btn_suspend, True, True, 0)
        self.btn_suspend.show()

        # Create hibernate button
        self.btn_hibernate = Gtk.Button('_Hibernate', None, True)
        self.btn_hibernate.set_border_width(btn_border_size)
        self.image = Gtk.Image()
        self.image.set_from_icon_name("gnome-session-hibernate", icon_size)
        self.btn_hibernate.set_property('image', self.image)
        self.btn_hibernate.connect("clicked", self.hibernate)
        self.box_middle.pack_start(self.btn_hibernate, True, True, 0)
        self.btn_hibernate.show()

        # Create cancel button
        self.btn_cancel = Gtk.Button('Cancel', None, True)
        self.btn_cancel.set_border_width(btn_border_size)
        self.image = Gtk.Image()
        self.image.set_from_icon_name("gtk-cancel",icon_size)
        self.btn_cancel.set_property('image', self.image)
        self.btn_cancel.connect("clicked", self.cancel, 'Cancelled')
        self.box_vert.pack_start(self.btn_cancel, True, True, 0)
        self.btn_cancel.show()

        self.box_top.show()
        self.box_middle.show()
        self.box_bottom.show()
        self.box_vert.show()
        self.set_focus(self.btn_logout)
        
    # Cancel/exit
    def cancel(self, widget=None, event=None, data=None):
        Gtk.main_quit()
        return False

    # Logout
    def logout(self, widget=None):
        os.system('openbox --exit')
        #os.system('xlogout')
        
    # Reboot
    def reboot(self, widget=None):
        os.system('loginctl reboot')

    # Shutdown
    def shutdown(self, widget=None):
        os.system('loginctl poweroff')

    # Suspend
    def suspend(self, widget=None):
        os.system('loginctl suspend')

    # Hibernate
    def hibernate(self, widget=None):
        os.system('loginctl hibernate')
        
if __name__ == "__main__":
    app = WMLogout()
    app.show_all()
    Gtk.main()
